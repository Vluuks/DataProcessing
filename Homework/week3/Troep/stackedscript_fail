getJSONfile(constructChart);
// duizend ton = 1 miljoen kilo

function getJSONfile(callback){
    d3.json("./bodemgebruik.json", function(rawData) {
        callback(rawData);
    });
}


function constructChart(data){
	
    // Define width and height of the SVG and margins
    var margin = {top: 20, right: 40, bottom: 60, left: 40},
        width = 1000 - margin.left - margin.right,
        height = 600 - margin.top - margin.bottom;

	// Find chart and set properties
	var svg = d3.select(".chart")
		.attr("width", width + margin.left + margin.right)
		.attr("height", height + margin.top + margin.bottom)
		.append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
			
	// Create a scaling function for X and Y
    var scalingX = d3.scaleBand()
		.rangeRound([0, width])
        .padding(0.1)
	
	var scalingY = d3.scaleLinear()
		.rangeRound([height, 0]);
	
	// Different colors for the different bars (.range?)
	var barColors = d3.scaleOrdinal(["#747d8c", "#993710", "#cae216", "#a35b99", "#f4bc77", "#4c7a3a", "#77e1f4"]);
    barColors.domain(d3.keys(data[0]).filter(function(key) { return (key !== "Regio" && key !== "Jaar" && key !== "Totaal"); }));
		
    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    
    // Get totals for each entry
    data.forEach(function(d) {
    var y0 = 0;
    d.bodemgebruik = barColors.domain().map(function(name) { return {name: name, y0: y0, y1: y0 += +d[name]}; });
    d.total = d.bodemgebruik[d.bodemgebruik.length - 1].y1;
    });

    data.sort(function(a, b) { return b.total - a.total; });

    scalingX.domain(data.map(function(d) { return d.State; }));
    scalingY.domain([0, d3.max(data, function(d) { return d.total; })]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(scalingX));

  svg.append("g")
      .attr("class", "y axis")
      .call(d3.axisLeft(scalingY))
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Bodemgebruik");

    var state = canvasStackChart.selectAll(".Regio")
    .data(data)
    .enter().append("g")
    .attr("class", "g")
    .attr("transform", function (d) { return "translate(" + xStackChart(d.Year) + ",0)"; });

    
    
    state.selectAll("rect")
    .data(function (d) { return d.ages; })
    .enter().append("rect")
    .attr("width", xStackChart.bandwidth())
    .attr("y", function (d) { return yStackChart(d.y1); })
    .attr("height", function (d) { return yStackChart(d.y0) - yStackChart(d.y1); })
    .style("fill", function (d) { return colorStackChart(d.name); });
}